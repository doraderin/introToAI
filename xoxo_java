import java.util.Scanner;
import java.util.ArrayList;

public class xoxoGame {
	
	Scanner scan = new Scanner(System.in);
    
    public String playerChar = "x"; // tris to maximixe
    public String AIChar = "o"; //tries to minimize
    public String[][] gameBoard = {
            {"-", "-", "-"},
            {"-", "-", "-"},
            {"-", "-", "-"},
        };

    
    public void startGame(String[] args) {
        System.out.println("You are x playing against o");
        System.out.println("enter position");
        int pos = scan.nextInt();
        newPosition(pos, "x");
    }        

    
    // pos lokasyonuna character x/o'sunu yerlestiriyo
    public void newPosition(int pos, String character){
    	int current = 1;
    	for (int i = 1; i <= gameBoard.length; i++) {
    		for (int j = 1; j <= gameBoard[0].length; j++) {
    			if (current == pos) {
    				gameBoard[i-1][j-1] = character;
    			}
    			current++;
    		}
    		
    	}
    	
    	/*TESTTTTTT
    	for (int i = 0; i < gameBoard.length; i++) {
            for (int j = 0; j < gameBoard[i].length; j++) {
                System.out.print(gameBoard[i][j] + " ");
            }
            System.out.println(); 
        }
    	*/
    }
    
    //x y capraz kazanma varmı bakıyo iki karakter içinde. minimax -> x maxime etmeye çalışıyo. o minimize etmeye çalışıyo
    public int win(String character) {
    	for (int i = 0; i < gameBoard.length; i++) {
    		if (gameBoard[i][0].equals(character) && gameBoard[i][1].equals(character) && gameBoard[i][2].equals(character)) {
    			if (character.equals("x")) {
    				return 1;
    			}
    			else {
    				return -1;
    			}
    		}
    		else if (gameBoard[0][i].equals(character) && gameBoard[1][i].equals(character) && gameBoard[2][i].equals(character)) {
    			if (character.equals("x")) {
    				return 1;
    			}
    			else {
    				return -1;
    			}
    		}
    	}
    	if ((gameBoard[0][0].equals(character) && gameBoard[1][1].equals(character) && gameBoard[2][2].equals(character)) || (gameBoard[0][2].equals(character) && gameBoard[1][1].equals(character) && gameBoard[2][0].equals(character))) {
			if (character.equals("x")) {
				return 1;
			}
			else {
				return -1;
			}
		}
    	return 0;
    }
    
    
    //checks hangi kareler boş ve onları liste halinde return ediyo
    public ArrayList<Integer> emptyLocs(){
    	
    	int locCount = 1;
    	
    	ArrayList<Integer> locs = new ArrayList<Integer>();
    	
    	for(int i = 0; i < gameBoard.length; i++) {
    		for (int j = 0; j < gameBoard[i].length; j++) {
    			if (gameBoard[i][j].equals("-")) {
    				locs.add(locCount);
    			}
    			locCount++;
    		}
    	}
    	return locs;
    }
    

    //oyunu başlauto
    public static void main(String[] args) {
        xoxoGame game = new xoxoGame();
        game.startGame(args);
    }
    
    
}
